// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Applitools
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// MiniTest
        /// </summary>
        public void MiniTest()
        {
            #region Variable Declarations
            WinTitleBar uICalculatorTitleBar = this.UICalculatorWindow.UICalculatorTitleBar;
            WinMenuItem uIScientificAlt2MenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIScientificAlt2MenuItem;
            WinMenuItem uIProgrammerAlt3MenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIProgrammerAlt3MenuItem;
            WinMenuItem uIStandardAlt1MenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIStandardAlt1MenuItem;
            WinMenuItem uIEditMenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIEditMenuItem;
            WinMenuItem uIAboutCalculatorMenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIHelpMenuItem.UIAboutCalculatorMenuItem;
            WinButton uIOKButton = this.UIAboutCalculatorWindow.UIOKWindow.UIOKButton;
            WinMenuItem uICopyCtrlCMenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIEditMenuItem.UICopyCtrlCMenuItem;
            WinMenuItem uIProgrammerAlt3MenuItem1 = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIProgrammerAlt3MenuItem1;
            WinMenuItem uIStatisticsAlt4MenuItem = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIStatisticsAlt4MenuItem;
            WinMenuItem uIStandardAlt1MenuItem1 = this.UICalculatorWindow.UIApplicationMenuBar.UIViewMenuItem.UIStandardAlt1MenuItem1;
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinButton uIAddButton = this.UICalculatorWindow.UIItemWindow1.UIAddButton;
            WinButton uIEqualsButton = this.UICalculatorWindow.UIItemWindow2.UIEqualsButton;
            WinButton uICloseButton = this.UICalculatorWindow.UICalculatorTitleBar.UICloseButton;
            #endregion

            // Click 'Calculator' title bar
            Mouse.Click(uICalculatorTitleBar, new Point(37, 17));

            // Click 'View' -> 'Scientific Alt+2' menu item
            Mouse.Click(uIScientificAlt2MenuItem, new Point(46, 9));

            // Click 'View' -> 'Programmer Alt+3' menu item
            Mouse.Click(uIProgrammerAlt3MenuItem, new Point(46, 10));

            // Click 'View' -> 'Standard Alt+1' menu item
            Mouse.Click(uIStandardAlt1MenuItem, new Point(45, 10));

            // Click 'Edit' menu item
            Mouse.Click(uIEditMenuItem, new Point(23, 11));

            // Click 'Help' -> 'About Calculator' menu item
            Mouse.Click(uIAboutCalculatorMenuItem, new Point(39, 5));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(34, 11));

            // Click 'Edit' -> 'Copy Ctrl+C' menu item
            Mouse.Click(uICopyCtrlCMenuItem, new Point(27, 14));

            // Click 'View' -> 'Programmer Alt+3' menu item
            Mouse.Click(uIProgrammerAlt3MenuItem1, new Point(50, 14));

            // Click 'View' -> 'Statistics Alt+4' menu item
            Mouse.Click(uIStatisticsAlt4MenuItem, new Point(53, 18));

            // Click 'View' -> 'Standard Alt+1' menu item
            Mouse.Click(uIStandardAlt1MenuItem1, new Point(27, 20));

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(25, 11));

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(26, 8));

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(19, 18));

            // Click 'Equals' button
            Mouse.Click(uIEqualsButton, new Point(18, 24));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 18));
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinButton uIItem1Button = this.UICalculatorWindow.UIItemWindow.UIItem1Button;
            WinText uIItem1Text = this.UICalculatorWindow.UIItem1Window.UIItem1Text;
            #endregion

            // Click '1' button
            Mouse.Click(uIItem1Button, new Point(26, 5));

            // Type '{+}2=' in '1' label
            Keyboard.SendKeys(uIItem1Text, this.RecordedMethod1Params.UIItem1TextSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinList uIItemsViewList = this.UIExplorerTestsWindow.UIShellViewWindow.UIShellViewClient.UIItemsViewList;
            WinMenuItem uITextDocumentMenuItem = this.UIItemWindow.UINewMenuItem.UITextDocumentMenuItem;
            WinEdit uIItemEdit = this.UIExplorerTestsWindow.UIItemWindow.UIItemEdit;
            WinButton uINewfolderButton = this.UIExplorerTestsWindow.UIItemWindow1.UINewToolBar.UINewfolderButton;
            WinEdit uIItemEdit1 = this.UIExplorerTestsWindow.UIItemWindow2.UIItemEdit;
            WinEdit uINameEdit = this.UIExplorerTestsWindow.UIItemWindow3.UIWorldListItem.UINameEdit;
            #endregion

            // Right-Click 'Items View' list box
            Mouse.Click(uIItemsViewList, MouseButtons.Right, ModifierKeys.None, new Point(199, 128));

            // Click 'New' -> 'Text Document' menu item
            Mouse.Click(uITextDocumentMenuItem, new Point(113, 10));

            // Type 'Hello.txt' in text box
            uIItemEdit.Text = this.RecordedMethod2Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod2Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'New folder' button
            Mouse.Click(uINewfolderButton, new Point(15, 45));

            // Type 'World' in text box
            uIItemEdit1.Text = this.RecordedMethod2Params.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit1, this.RecordedMethod2Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(47, 15));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinToolBar uIAddressCUsersaDocumeToolBar = this.UIMyDocumentsWindow.UIAddressCUsersaDocumeWindow.UIAddressCUsersaDocumeToolBar;
            WinComboBox uIAddressComboBox = this.UIMyDocumentsWindow.UIItemWindow.UIAddressComboBox;
            WinEdit uIAddressEdit = this.UIMyDocumentsWindow.UIItemWindow1.UIAddressEdit;
            #endregion

            // Click 'Address: C:\Users\a\Documents' tool bar
            Mouse.Click(uIAddressCUsersaDocumeToolBar, new Point(273, 19));

            // Select 'c:\users' in 'Address' combo box
            uIAddressComboBox.EditableItem = this.RecordedMethod3Params.UIAddressComboBoxEditableItem;

            // Type '{Enter}' in 'Address' text box
            Keyboard.SendKeys(uIAddressEdit, this.RecordedMethod3Params.UIAddressEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinComboBox uIOpenComboBox = this.UIRunWindow.UIItemWindow.UIOpenComboBox;
            WinEdit uIOpenEdit = this.UIRunWindow.UIItemWindow1.UIOpenEdit;
            WinButton uIOKButton = this.UICtemptest2Window.UICtemptest2Pane.UIOKButton;
            #endregion

            // Press keyboard shortcut keys 'Windows + r'
            Keyboard.SendKeys(this.RecordedMethod4Params.SendKeys, ModifierKeys.Windows);

            // Select 'c:\temp\test2' in 'Open:' combo box
            uIOpenComboBox.EditableItem = this.RecordedMethod4Params.UIOpenComboBoxEditableItem;

            // Type '{Enter}' in 'Open:' text box
            Keyboard.SendKeys(uIOpenEdit, this.RecordedMethod4Params.UIOpenEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(35, 5));
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinControl uINewitemDropDownButton = this.UIExplorerTestsWindow.UIItemWindow1.UINewToolBar.UINewitemDropDownButton;
            WinControl uINewitemDropDownButton1 = this.UIExplorerTestsWindow.UIItemWindow1.UINewToolBar.UINewitemDropDownButton1;
            WinMenuItem uITextDocumentMenuItem = this.UIExplorerTestsWindow.UIItemWindow1.UINewitemClient.UIItemGroup.UITextDocumentMenuItem;
            WinEdit uIItemEdit = this.UIExplorerTestsWindow.UIItemWindow.UIItemEdit;
            WinControl uINewitemDropDownButton2 = this.UIExplorerTestsWindow.UIItemWindow1.UINewToolBar.UINewitemDropDownButton2;
            WinMenuItem uIFolderMenuItem = this.UIExplorerTestsWindow.UIItemWindow1.UINewitemClient1.UIItemGroup.UIFolderMenuItem;
            WinList uIItemsViewList = this.UIExplorerTestsWindow.UIShellViewWindow.UIShellViewClient.UIItemsViewList;
            #endregion

            // Click 'New item' DropDownButton
            Mouse.Click(uINewitemDropDownButton, new Point(60, 15));

            // Click 'New item' DropDownButton
            Mouse.Click(uINewitemDropDownButton1, new Point(60, 15));

            // Click 'Text Document' menu item
            Mouse.Click(uITextDocumentMenuItem, new Point(58, 27));

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod5Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'New item' DropDownButton
            Mouse.Click(uINewitemDropDownButton2, new Point(58, 17));

            // Click 'Folder' menu item
            Mouse.Click(uIFolderMenuItem, new Point(66, 13));

            // Click 'Items View' list box
            Mouse.Click(uIItemsViewList, new Point(100, 328));
        }
        
        /// <summary>
        /// RecordedMethod6 - Use 'RecordedMethod6Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            HtmlHyperlink uIPricingHyperlink = this.UIGoogleWindowsInterneWindow.UIGitHubEnterpriseGitrDocument.UIPricingHyperlink;
            HtmlHyperlink uIFAQHyperlink = this.UIGoogleWindowsInterneWindow.UIPricingGitHubEnterprDocument.UIFAQHyperlink;
            HtmlHyperlink uISupportHyperlink = this.UIGoogleWindowsInterneWindow.UIFAQGitHubEnterpriseDocument.UISupportHyperlink;
            HtmlHyperlink uIContactHyperlink = this.UIGoogleWindowsInterneWindow.UISupportGitHubEnterprDocument.UIContactHyperlink;
            HtmlHyperlink uIHomeHyperlink = this.UIGoogleWindowsInterneWindow.UIContactusGitHubEnterDocument.UIHomeHyperlink;
            #endregion

            // Go to web page 'https://enterprise.github.com/' using new browser instance
            this.UIGoogleWindowsInterneWindow.LaunchUrl(new System.Uri(this.RecordedMethod6Params.UIGoogleWindowsInterneWindowUrl));

            // Click 'Pricing' link
            Mouse.Click(uIPricingHyperlink, new Point(38, 17));

            // Click 'FAQ' link
            Mouse.Click(uIFAQHyperlink, new Point(40, 19));

            // Click 'Support' link
            Mouse.Click(uISupportHyperlink, new Point(41, 20));

            // Click 'Contact' link
            Mouse.Click(uIContactHyperlink, new Point(30, 20));

            // Click 'Home' link
            Mouse.Click(uIHomeHyperlink, new Point(29, 17));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual RecordedMethod6Params RecordedMethod6Params
        {
            get
            {
                if ((this.mRecordedMethod6Params == null))
                {
                    this.mRecordedMethod6Params = new RecordedMethod6Params();
                }
                return this.mRecordedMethod6Params;
            }
        }
        
        public UICalculatorWindow UICalculatorWindow
        {
            get
            {
                if ((this.mUICalculatorWindow == null))
                {
                    this.mUICalculatorWindow = new UICalculatorWindow();
                }
                return this.mUICalculatorWindow;
            }
        }
        
        public UIAboutCalculatorWindow UIAboutCalculatorWindow
        {
            get
            {
                if ((this.mUIAboutCalculatorWindow == null))
                {
                    this.mUIAboutCalculatorWindow = new UIAboutCalculatorWindow();
                }
                return this.mUIAboutCalculatorWindow;
            }
        }
        
        public UIExplorerTestsWindow UIExplorerTestsWindow
        {
            get
            {
                if ((this.mUIExplorerTestsWindow == null))
                {
                    this.mUIExplorerTestsWindow = new UIExplorerTestsWindow();
                }
                return this.mUIExplorerTestsWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMyDocumentsWindow UIMyDocumentsWindow
        {
            get
            {
                if ((this.mUIMyDocumentsWindow == null))
                {
                    this.mUIMyDocumentsWindow = new UIMyDocumentsWindow();
                }
                return this.mUIMyDocumentsWindow;
            }
        }
        
        public UIRunWindow UIRunWindow
        {
            get
            {
                if ((this.mUIRunWindow == null))
                {
                    this.mUIRunWindow = new UIRunWindow();
                }
                return this.mUIRunWindow;
            }
        }
        
        public UICtemptest2Window UICtemptest2Window
        {
            get
            {
                if ((this.mUICtemptest2Window == null))
                {
                    this.mUICtemptest2Window = new UICtemptest2Window();
                }
                return this.mUICtemptest2Window;
            }
        }
        
        public UIGoogleWindowsInterneWindow UIGoogleWindowsInterneWindow
        {
            get
            {
                if ((this.mUIGoogleWindowsInterneWindow == null))
                {
                    this.mUIGoogleWindowsInterneWindow = new UIGoogleWindowsInterneWindow();
                }
                return this.mUIGoogleWindowsInterneWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private RecordedMethod6Params mRecordedMethod6Params;
        
        private UICalculatorWindow mUICalculatorWindow;
        
        private UIAboutCalculatorWindow mUIAboutCalculatorWindow;
        
        private UIExplorerTestsWindow mUIExplorerTestsWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIMyDocumentsWindow mUIMyDocumentsWindow;
        
        private UIRunWindow mUIRunWindow;
        
        private UICtemptest2Window mUICtemptest2Window;
        
        private UIGoogleWindowsInterneWindow mUIGoogleWindowsInterneWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{+}2=' in '1' label
        /// </summary>
        public string UIItem1TextSendKeys = "{+}2=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'Hello.txt' in text box
        /// </summary>
        public string UIItemEditText = "Hello.txt";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'World' in text box
        /// </summary>
        public string UIItemEditText1 = "World";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'c:\users' in 'Address' combo box
        /// </summary>
        public string UIAddressComboBoxEditableItem = "c:\\users";
        
        /// <summary>
        /// Type '{Enter}' in 'Address' text box
        /// </summary>
        public string UIAddressEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + r'
        /// </summary>
        public string SendKeys = "r";
        
        /// <summary>
        /// Select 'c:\temp\test2' in 'Open:' combo box
        /// </summary>
        public string UIOpenComboBoxEditableItem = "c:\\temp\\test2";
        
        /// <summary>
        /// Type '{Enter}' in 'Open:' text box
        /// </summary>
        public string UIOpenEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class RecordedMethod6Params
    {
        
        #region Fields
        /// <summary>
        /// Go to web page 'https://enterprise.github.com/' using new browser instance
        /// </summary>
        public string UIGoogleWindowsInterneWindowUrl = "https://enterprise.github.com/";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICalculatorWindow : WinWindow
    {
        
        public UICalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CalcFrame";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public UICalculatorTitleBar UICalculatorTitleBar
        {
            get
            {
                if ((this.mUICalculatorTitleBar == null))
                {
                    this.mUICalculatorTitleBar = new UICalculatorTitleBar(this);
                }
                return this.mUICalculatorTitleBar;
            }
        }
        
        public UIApplicationMenuBar UIApplicationMenuBar
        {
            get
            {
                if ((this.mUIApplicationMenuBar == null))
                {
                    this.mUIApplicationMenuBar = new UIApplicationMenuBar(this);
                }
                return this.mUIApplicationMenuBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItem1Window UIItem1Window
        {
            get
            {
                if ((this.mUIItem1Window == null))
                {
                    this.mUIItem1Window = new UIItem1Window(this);
                }
                return this.mUIItem1Window;
            }
        }
        #endregion
        
        #region Fields
        private UICalculatorTitleBar mUICalculatorTitleBar;
        
        private UIApplicationMenuBar mUIApplicationMenuBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItem1Window mUIItem1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICalculatorTitleBar : WinTitleBar
    {
        
        public UICalculatorTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIApplicationMenuBar : WinMenuBar
    {
        
        public UIApplicationMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "Application";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public UIViewMenuItem UIViewMenuItem
        {
            get
            {
                if ((this.mUIViewMenuItem == null))
                {
                    this.mUIViewMenuItem = new UIViewMenuItem(this);
                }
                return this.mUIViewMenuItem;
            }
        }
        
        public UIEditMenuItem UIEditMenuItem
        {
            get
            {
                if ((this.mUIEditMenuItem == null))
                {
                    this.mUIEditMenuItem = new UIEditMenuItem(this);
                }
                return this.mUIEditMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIViewMenuItem mUIViewMenuItem;
        
        private UIEditMenuItem mUIEditMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIViewMenuItem : WinMenuItem
    {
        
        public UIViewMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "View";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIScientificAlt2MenuItem
        {
            get
            {
                if ((this.mUIScientificAlt2MenuItem == null))
                {
                    this.mUIScientificAlt2MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIScientificAlt2MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Scientific\tAlt+2";
                    this.mUIScientificAlt2MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIScientificAlt2MenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIScientificAlt2MenuItem;
            }
        }
        
        public WinMenuItem UIProgrammerAlt3MenuItem
        {
            get
            {
                if ((this.mUIProgrammerAlt3MenuItem == null))
                {
                    this.mUIProgrammerAlt3MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIProgrammerAlt3MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Programmer\tAlt+3";
                    this.mUIProgrammerAlt3MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProgrammerAlt3MenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIProgrammerAlt3MenuItem;
            }
        }
        
        public WinMenuItem UIStandardAlt1MenuItem
        {
            get
            {
                if ((this.mUIStandardAlt1MenuItem == null))
                {
                    this.mUIStandardAlt1MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIStandardAlt1MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Standard\tAlt+1";
                    this.mUIStandardAlt1MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStandardAlt1MenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIStandardAlt1MenuItem;
            }
        }
        
        public WinMenuItem UIProgrammerAlt3MenuItem1
        {
            get
            {
                if ((this.mUIProgrammerAlt3MenuItem1 == null))
                {
                    this.mUIProgrammerAlt3MenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIProgrammerAlt3MenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Programmer\tAlt+3";
                    this.mUIProgrammerAlt3MenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIProgrammerAlt3MenuItem1.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIProgrammerAlt3MenuItem1;
            }
        }
        
        public WinMenuItem UIStatisticsAlt4MenuItem
        {
            get
            {
                if ((this.mUIStatisticsAlt4MenuItem == null))
                {
                    this.mUIStatisticsAlt4MenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIStatisticsAlt4MenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Statistics\tAlt+4";
                    this.mUIStatisticsAlt4MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStatisticsAlt4MenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIStatisticsAlt4MenuItem;
            }
        }
        
        public WinMenuItem UIStandardAlt1MenuItem1
        {
            get
            {
                if ((this.mUIStandardAlt1MenuItem1 == null))
                {
                    this.mUIStandardAlt1MenuItem1 = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIStandardAlt1MenuItem1.SearchProperties[WinMenuItem.PropertyNames.Name] = "Standard\tAlt+1";
                    this.mUIStandardAlt1MenuItem1.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIStandardAlt1MenuItem1.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIStandardAlt1MenuItem1;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIScientificAlt2MenuItem;
        
        private WinMenuItem mUIProgrammerAlt3MenuItem;
        
        private WinMenuItem mUIStandardAlt1MenuItem;
        
        private WinMenuItem mUIProgrammerAlt3MenuItem1;
        
        private WinMenuItem mUIStatisticsAlt4MenuItem;
        
        private WinMenuItem mUIStandardAlt1MenuItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIEditMenuItem : WinMenuItem
    {
        
        public UIEditMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Edit";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICopyCtrlCMenuItem
        {
            get
            {
                if ((this.mUICopyCtrlCMenuItem == null))
                {
                    this.mUICopyCtrlCMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICopyCtrlCMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Copy\tCtrl+C";
                    this.mUICopyCtrlCMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICopyCtrlCMenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUICopyCtrlCMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICopyCtrlCMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIAboutCalculatorMenuItem
        {
            get
            {
                if ((this.mUIAboutCalculatorMenuItem == null))
                {
                    this.mUIAboutCalculatorMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutCalculatorMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About Calculator";
                    this.mUIAboutCalculatorMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutCalculatorMenuItem.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAboutCalculatorMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIAboutCalculatorMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "131";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WinButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WinButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIItem1Button;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "93";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WinButton.PropertyNames.Name] = "Add";
                    this.mUIAddButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "121";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIEqualsButton
        {
            get
            {
                if ((this.mUIEqualsButton == null))
                {
                    this.mUIEqualsButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEqualsButton.SearchProperties[WinButton.PropertyNames.Name] = "Equals";
                    this.mUIEqualsButton.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIEqualsButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEqualsButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItem1Window : WinWindow
    {
        
        public UIItem1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "150";
            this.WindowTitles.Add("Calculator");
            #endregion
        }
        
        #region Properties
        public WinText UIItem1Text
        {
            get
            {
                if ((this.mUIItem1Text == null))
                {
                    this.mUIItem1Text = new WinText(this);
                    #region Search Criteria
                    this.mUIItem1Text.SearchProperties[WinText.PropertyNames.Name] = "Result";
                    this.mUIItem1Text.WindowTitles.Add("Calculator");
                    #endregion
                }
                return this.mUIItem1Text;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIItem1Text;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAboutCalculatorWindow : WinWindow
    {
        
        public UIAboutCalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About Calculator";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About Calculator");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("About Calculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About Calculator");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIExplorerTestsWindow : WinWindow
    {
        
        public UIExplorerTestsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ExplorerTests";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UIShellViewWindow UIShellViewWindow
        {
            get
            {
                if ((this.mUIShellViewWindow == null))
                {
                    this.mUIShellViewWindow = new UIShellViewWindow(this);
                }
                return this.mUIShellViewWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow31 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow31(this);
                }
                return this.mUIItemWindow3;
            }
        }
        #endregion
        
        #region Fields
        private UIShellViewWindow mUIShellViewWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        
        private UIItemWindow31 mUIItemWindow3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIShellViewWindow : WinWindow
    {
        
        public UIShellViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "ShellView";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "SHELLDLL_DefView";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UIShellViewClient UIShellViewClient
        {
            get
            {
                if ((this.mUIShellViewClient == null))
                {
                    this.mUIShellViewClient = new UIShellViewClient(this);
                }
                return this.mUIShellViewClient;
            }
        }
        #endregion
        
        #region Fields
        private UIShellViewClient mUIShellViewClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIShellViewClient : WinClient
    {
        
        public UIShellViewClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Shell Folder View";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new WinList(this);
                    #region Search Criteria
                    this.mUIItemsViewList.SearchProperties[WinList.PropertyNames.Name] = "Items View";
                    this.mUIItemsViewList.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "New Text Document.txt";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Ribbon";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "NetUIHWND";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UINewToolBar UINewToolBar
        {
            get
            {
                if ((this.mUINewToolBar == null))
                {
                    this.mUINewToolBar = new UINewToolBar(this);
                }
                return this.mUINewToolBar;
            }
        }
        
        public UINewitemClient UINewitemClient
        {
            get
            {
                if ((this.mUINewitemClient == null))
                {
                    this.mUINewitemClient = new UINewitemClient(this);
                }
                return this.mUINewitemClient;
            }
        }
        
        public UINewitemClient1 UINewitemClient1
        {
            get
            {
                if ((this.mUINewitemClient1 == null))
                {
                    this.mUINewitemClient1 = new UINewitemClient1(this);
                }
                return this.mUINewitemClient1;
            }
        }
        #endregion
        
        #region Fields
        private UINewToolBar mUINewToolBar;
        
        private UINewitemClient mUINewitemClient;
        
        private UINewitemClient1 mUINewitemClient1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewToolBar : WinToolBar
    {
        
        public UINewToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "New";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinButton UINewfolderButton
        {
            get
            {
                if ((this.mUINewfolderButton == null))
                {
                    this.mUINewfolderButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINewfolderButton.SearchProperties[WinButton.PropertyNames.Name] = "New folder";
                    this.mUINewfolderButton.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUINewfolderButton;
            }
        }
        
        public WinControl UINewitemDropDownButton
        {
            get
            {
                if ((this.mUINewitemDropDownButton == null))
                {
                    this.mUINewitemDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUINewitemDropDownButton.SearchProperties[UITestControl.PropertyNames.Name] = "New item";
                    this.mUINewitemDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUINewitemDropDownButton.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUINewitemDropDownButton;
            }
        }
        
        public WinControl UINewitemDropDownButton1
        {
            get
            {
                if ((this.mUINewitemDropDownButton1 == null))
                {
                    this.mUINewitemDropDownButton1 = new WinControl(this);
                    #region Search Criteria
                    this.mUINewitemDropDownButton1.SearchProperties[UITestControl.PropertyNames.Name] = "New item";
                    this.mUINewitemDropDownButton1.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUINewitemDropDownButton1.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUINewitemDropDownButton1;
            }
        }
        
        public WinControl UINewitemDropDownButton2
        {
            get
            {
                if ((this.mUINewitemDropDownButton2 == null))
                {
                    this.mUINewitemDropDownButton2 = new WinControl(this);
                    #region Search Criteria
                    this.mUINewitemDropDownButton2.SearchProperties[UITestControl.PropertyNames.Name] = "New item";
                    this.mUINewitemDropDownButton2.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUINewitemDropDownButton2.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUINewitemDropDownButton2;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINewfolderButton;
        
        private WinControl mUINewitemDropDownButton;
        
        private WinControl mUINewitemDropDownButton1;
        
        private WinControl mUINewitemDropDownButton2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewitemClient : WinClient
    {
        
        public UINewitemClient(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UIItemGroup UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGroup mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemGroup : WinGroup
    {
        
        public UIItemGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UITextDocumentMenuItem
        {
            get
            {
                if ((this.mUITextDocumentMenuItem == null))
                {
                    this.mUITextDocumentMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUITextDocumentMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Rich Text Document";
                    this.mUITextDocumentMenuItem.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUITextDocumentMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUITextDocumentMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewitemClient1 : WinClient
    {
        
        public UINewitemClient1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UIItemGroup1 UIItemGroup
        {
            get
            {
                if ((this.mUIItemGroup == null))
                {
                    this.mUIItemGroup = new UIItemGroup1(this);
                }
                return this.mUIItemGroup;
            }
        }
        #endregion
        
        #region Fields
        private UIItemGroup1 mUIItemGroup;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemGroup1 : WinGroup
    {
        
        public UIItemGroup1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIFolderMenuItem
        {
            get
            {
                if ((this.mUIFolderMenuItem == null))
                {
                    this.mUIFolderMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIFolderMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Folder";
                    this.mUIFolderMenuItem.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUIFolderMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIFolderMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "New folder";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Edit";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow31 : WinWindow
    {
        
        public UIItemWindow31(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public UIWorldListItem UIWorldListItem
        {
            get
            {
                if ((this.mUIWorldListItem == null))
                {
                    this.mUIWorldListItem = new UIWorldListItem(this);
                }
                return this.mUIWorldListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIWorldListItem mUIWorldListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIWorldListItem : WinListItem
    {
        
        public UIWorldListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "World";
            this.WindowTitles.Add("ExplorerTests");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("ExplorerTests");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Context";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32768";
            #endregion
        }
        
        #region Properties
        public UINewMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new UINewMenuItem(this);
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UINewMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UINewMenuItem : WinMenuItem
    {
        
        public UINewMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
            #endregion
        }
        
        #region Properties
        public WinMenuItem UITextDocumentMenuItem
        {
            get
            {
                if ((this.mUITextDocumentMenuItem == null))
                {
                    this.mUITextDocumentMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUITextDocumentMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Text Document";
                    this.mUITextDocumentMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    #endregion
                }
                return this.mUITextDocumentMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUITextDocumentMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIMyDocumentsWindow : WinWindow
    {
        
        public UIMyDocumentsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "My Documents";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("My Documents");
            this.WindowTitles.Add("Users");
            #endregion
        }
        
        #region Properties
        public UIAddressCUsersaDocumeWindow UIAddressCUsersaDocumeWindow
        {
            get
            {
                if ((this.mUIAddressCUsersaDocumeWindow == null))
                {
                    this.mUIAddressCUsersaDocumeWindow = new UIAddressCUsersaDocumeWindow(this);
                }
                return this.mUIAddressCUsersaDocumeWindow;
            }
        }
        
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIAddressCUsersaDocumeWindow mUIAddressCUsersaDocumeWindow;
        
        private UIItemWindow5 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIAddressCUsersaDocumeWindow : WinWindow
    {
        
        public UIAddressCUsersaDocumeWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("My Documents");
            #endregion
        }
        
        #region Properties
        public WinToolBar UIAddressCUsersaDocumeToolBar
        {
            get
            {
                if ((this.mUIAddressCUsersaDocumeToolBar == null))
                {
                    this.mUIAddressCUsersaDocumeToolBar = new WinToolBar(this);
                    #region Search Criteria
                    this.mUIAddressCUsersaDocumeToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "Address: C:\\Users\\a\\Documents";
                    this.mUIAddressCUsersaDocumeToolBar.WindowTitles.Add("My Documents");
                    #endregion
                }
                return this.mUIAddressCUsersaDocumeToolBar;
            }
        }
        #endregion
        
        #region Fields
        private WinToolBar mUIAddressCUsersaDocumeToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("My Documents");
            this.WindowTitles.Add("Users");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIAddressComboBox
        {
            get
            {
                if ((this.mUIAddressComboBox == null))
                {
                    this.mUIAddressComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIAddressComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Address";
                    this.mUIAddressComboBox.WindowTitles.Add("My Documents");
                    this.mUIAddressComboBox.WindowTitles.Add("Users");
                    #endregion
                }
                return this.mUIAddressComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIAddressComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "41477";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "4";
            this.WindowTitles.Add("My Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAddressEdit
        {
            get
            {
                if ((this.mUIAddressEdit == null))
                {
                    this.mUIAddressEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAddressEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Address";
                    this.mUIAddressEdit.WindowTitles.Add("My Documents");
                    #endregion
                }
                return this.mUIAddressEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAddressEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIRunWindow : WinWindow
    {
        
        public UIRunWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Run";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public UIItemWindow6 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow6(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow6 mUIItemWindow;
        
        private UIItemWindow13 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "12298";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIOpenComboBox
        {
            get
            {
                if ((this.mUIOpenComboBox == null))
                {
                    this.mUIOpenComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIOpenComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Open:";
                    this.mUIOpenComboBox.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIOpenComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Run");
            #endregion
        }
        
        #region Properties
        public WinEdit UIOpenEdit
        {
            get
            {
                if ((this.mUIOpenEdit == null))
                {
                    this.mUIOpenEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIOpenEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Open:";
                    this.mUIOpenEdit.WindowTitles.Add("Run");
                    #endregion
                }
                return this.mUIOpenEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIOpenEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICtemptest2Window : WinWindow
    {
        
        public UICtemptest2Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "c:\\temp\\test2";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("c:\\temp\\test2");
            #endregion
        }
        
        #region Properties
        public UICtemptest2Pane UICtemptest2Pane
        {
            get
            {
                if ((this.mUICtemptest2Pane == null))
                {
                    this.mUICtemptest2Pane = new UICtemptest2Pane(this);
                }
                return this.mUICtemptest2Pane;
            }
        }
        #endregion
        
        #region Fields
        private UICtemptest2Pane mUICtemptest2Pane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UICtemptest2Pane : WinPane
    {
        
        public UICtemptest2Pane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "c:\\temp\\test2";
            this.WindowTitles.Add("c:\\temp\\test2");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("c:\\temp\\test2");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGoogleWindowsInterneWindow : BrowserWindow
    {
        
        public UIGoogleWindowsInterneWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Google";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Google");
            this.WindowTitles.Add("GitHub Enterprise - Git repositories and collaboration tools on your servers");
            this.WindowTitles.Add("Pricing - GitHub Enterprise");
            this.WindowTitles.Add("FAQ - GitHub Enterprise");
            this.WindowTitles.Add("Support - GitHub Enterprise");
            this.WindowTitles.Add("Contact us - GitHub Enterprise");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIGitHubEnterpriseGitrDocument UIGitHubEnterpriseGitrDocument
        {
            get
            {
                if ((this.mUIGitHubEnterpriseGitrDocument == null))
                {
                    this.mUIGitHubEnterpriseGitrDocument = new UIGitHubEnterpriseGitrDocument(this);
                }
                return this.mUIGitHubEnterpriseGitrDocument;
            }
        }
        
        public UIPricingGitHubEnterprDocument UIPricingGitHubEnterprDocument
        {
            get
            {
                if ((this.mUIPricingGitHubEnterprDocument == null))
                {
                    this.mUIPricingGitHubEnterprDocument = new UIPricingGitHubEnterprDocument(this);
                }
                return this.mUIPricingGitHubEnterprDocument;
            }
        }
        
        public UIFAQGitHubEnterpriseDocument UIFAQGitHubEnterpriseDocument
        {
            get
            {
                if ((this.mUIFAQGitHubEnterpriseDocument == null))
                {
                    this.mUIFAQGitHubEnterpriseDocument = new UIFAQGitHubEnterpriseDocument(this);
                }
                return this.mUIFAQGitHubEnterpriseDocument;
            }
        }
        
        public UISupportGitHubEnterprDocument UISupportGitHubEnterprDocument
        {
            get
            {
                if ((this.mUISupportGitHubEnterprDocument == null))
                {
                    this.mUISupportGitHubEnterprDocument = new UISupportGitHubEnterprDocument(this);
                }
                return this.mUISupportGitHubEnterprDocument;
            }
        }
        
        public UIContactusGitHubEnterDocument UIContactusGitHubEnterDocument
        {
            get
            {
                if ((this.mUIContactusGitHubEnterDocument == null))
                {
                    this.mUIContactusGitHubEnterDocument = new UIContactusGitHubEnterDocument(this);
                }
                return this.mUIContactusGitHubEnterDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIGitHubEnterpriseGitrDocument mUIGitHubEnterpriseGitrDocument;
        
        private UIPricingGitHubEnterprDocument mUIPricingGitHubEnterprDocument;
        
        private UIFAQGitHubEnterpriseDocument mUIFAQGitHubEnterpriseDocument;
        
        private UISupportGitHubEnterprDocument mUISupportGitHubEnterprDocument;
        
        private UIContactusGitHubEnterDocument mUIContactusGitHubEnterDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIGitHubEnterpriseGitrDocument : HtmlDocument
    {
        
        public UIGitHubEnterpriseGitrDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "GitHub Enterprise - Git repositories and collaboration tools on your servers";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://enterprise.github.com/";
            this.WindowTitles.Add("GitHub Enterprise - Git repositories and collaboration tools on your servers");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIPricingHyperlink
        {
            get
            {
                if ((this.mUIPricingHyperlink == null))
                {
                    this.mUIPricingHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIPricingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIPricingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIPricingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIPricingHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Pricing";
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/pricing";
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://enterprise.github.com/pricing";
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/pricing\"";
                    this.mUIPricingHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "3";
                    this.mUIPricingHyperlink.WindowTitles.Add("GitHub Enterprise - Git repositories and collaboration tools on your servers");
                    #endregion
                }
                return this.mUIPricingHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIPricingHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIPricingGitHubEnterprDocument : HtmlDocument
    {
        
        public UIPricingGitHubEnterprDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Pricing - GitHub Enterprise";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/pricing";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://enterprise.github.com/pricing";
            this.WindowTitles.Add("Pricing - GitHub Enterprise");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIFAQHyperlink
        {
            get
            {
                if ((this.mUIFAQHyperlink == null))
                {
                    this.mUIFAQHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIFAQHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIFAQHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIFAQHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIFAQHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "FAQ";
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/faq";
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://enterprise.github.com/faq";
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/faq\"";
                    this.mUIFAQHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "4";
                    this.mUIFAQHyperlink.WindowTitles.Add("Pricing - GitHub Enterprise");
                    #endregion
                }
                return this.mUIFAQHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIFAQHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIFAQGitHubEnterpriseDocument : HtmlDocument
    {
        
        public UIFAQGitHubEnterpriseDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "FAQ - GitHub Enterprise";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/faq";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://enterprise.github.com/faq";
            this.WindowTitles.Add("FAQ - GitHub Enterprise");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UISupportHyperlink
        {
            get
            {
                if ((this.mUISupportHyperlink == null))
                {
                    this.mUISupportHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUISupportHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUISupportHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUISupportHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUISupportHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Support";
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/support";
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://enterprise.github.com/support";
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/support\"";
                    this.mUISupportHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "5";
                    this.mUISupportHyperlink.WindowTitles.Add("FAQ - GitHub Enterprise");
                    #endregion
                }
                return this.mUISupportHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUISupportHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISupportGitHubEnterprDocument : HtmlDocument
    {
        
        public UISupportGitHubEnterprDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Support - GitHub Enterprise";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/support";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://enterprise.github.com/support";
            this.WindowTitles.Add("Support - GitHub Enterprise");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIContactHyperlink
        {
            get
            {
                if ((this.mUIContactHyperlink == null))
                {
                    this.mUIContactHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIContactHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIContactHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIContactHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIContactHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Contact";
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/contact";
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://enterprise.github.com/contact";
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = "ga-trial-button-contact-nav";
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "class=\"ga-trial-button-contact-nav\" href";
                    this.mUIContactHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "6";
                    this.mUIContactHyperlink.WindowTitles.Add("Support - GitHub Enterprise");
                    #endregion
                }
                return this.mUIContactHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIContactHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIContactusGitHubEnterDocument : HtmlDocument
    {
        
        public UIContactusGitHubEnterDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Contact us - GitHub Enterprise";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/contact";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "https://enterprise.github.com/contact";
            this.WindowTitles.Add("Contact us - GitHub Enterprise");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIHomeHyperlink
        {
            get
            {
                if ((this.mUIHomeHyperlink == null))
                {
                    this.mUIHomeHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIHomeHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "Home";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "https://enterprise.github.com/";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "href=\"/\"";
                    this.mUIHomeHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "2";
                    this.mUIHomeHyperlink.WindowTitles.Add("Contact us - GitHub Enterprise");
                    #endregion
                }
                return this.mUIHomeHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIHomeHyperlink;
        #endregion
    }
}
